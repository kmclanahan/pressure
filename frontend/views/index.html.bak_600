<!doctype html>
<html lang="en">
<head>
   <title>Pressure -- Real-Time Crisis Navigator</title>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1">
   <meta http-equiv="content-type" content="text/html; charset=UTF-8">
   <meta name="robots" content="noindex, nofollow">
   <meta name="googlebot" content="noindex, nofollow">
   <script type="text/javascript" src="//code.jquery.com/jquery-1.11.0.js"></script>
   <script src="https://d3js.org/d3.v4.min.js"></script>
   <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.3/angular.min.js"></script>
   <script src="//cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.3/angular-route.min.js"></script>
   <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
   <script type="text/javascript" src="http://mbostock.github.com/d3/d3.csv.js"></script>
   <script type="text/javascript" src="http://mbostock.github.com/d3/d3.time.js"></script>
   <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css">
   <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
   <link rel="stylesheet" type="text/css" href="/css/result-light.css">
   
   <style type="text/css">
   .loading {
     margin-top: 10em;
     text-align: center;
     color: gray;
   }

   body {
     background: #eee;
   }
   /* Always set the map height explicitly to define the size of the div
    * element that contains the map. */
   #map {
        height: 80%;
        width: 90%;
        margin-left: auto;
        margin-right: auto;
    }
   #feed {
        height: 20%;
        width: 80%;
        margin-left: auto;
        margin-right: auto;
    }

   #alerts{
     background-color: black;
     height: 5%;
      width: 90%;
      margin: 0  auto;
   }

    /* Optional: Makes the sample page fill the window. */
    html, body {
      height: 100%;


	.stations, .stations svg {
	  position: absolute;
	}
	.stations svg {
	  width: 60px;
	  height: 20px;
	  padding-right: 100px;
	  font: 10px sans-serif;
	}
	.stations circle {
	  fill: brown;
	  stroke: black;
	  stroke-width: 1.5px;
	}

    }
   </style>
</head>
<body>
<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <!-- Brand and toggle get grouped for better mobile display -->
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="#">PRESSURE</a>
    </div>

    <!-- Collect the nav links, forms, and other content for toggling -->
    <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
      <ul class="nav navbar-nav">
        <li class="active"><a href="#">Home <span class="sr-only">(current)</span></a></li>
      </ul>
      <form class="navbar-form navbar-left">
        <button type="submit" class="btn btn-danger">SOS</button>
      </form>
      <ul class="nav navbar-nav navbar-right">
        <!---<li><a href="#">Translate</a></li>--->
        <!---<li><a href="#">Connect</a></li>--->
        <li><a href="/profile">Profile</a></li>
        <li class="dropdown">
          <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Countries <span class="caret"></span></a>
          <ul id = "country_dd" class="dropdown-menu">
           <li><a href="#"></li>
          </ul>
        </li>
      </ul>
    </div><!-- /.navbar-collapse -->
  </div><!-- /.container-fluid -->
</nav>

<br/>
    <div id="alerts">
	<div id="alert_1" style="color: orange; font-weight: bold;">Egypt: ALERT -- Politcal Unrest</div>
	<div id="alert_1" style="color: red; font-weight: bold;">Malawi: ALERT -- Border Dispute</div>
    </div>

<div style = "height:100%; padding: 0px;" class="jumbotron">
    <div id="map"></div>
    <script>

     // $(function () {
     feedUrl = "NotSet";

     // Read a page's GET URL variables and return them as an associative array.
     function getUrlVars()
     {
       var vars = [], hash;
       var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
       for(var i = 0; i < hashes.length; i++)
       {
           hash = hashes[i].split('=');
           vars.push(hash[0]);
           vars[hash[0]] = hash[1];
        }
        return vars;
      }

      var map;
      var im = 'http://www.robotwoods.com/dev/misc/bluecircle.png';
      d3.csv('countries.csv', function(error, dataset) {  // NEW
	  d3.select("#country_dd")
    	    .selectAll("li")
      	    .data(dataset)
    	    .enter()
            .append("li")
                 .html(function(d) { return "<a href='/?lat=" + d.Lat + "&lng=" + d.Long +"&feedurl="+ d.NewsFeed + "'>" +d.Country + "</a>" });
       });




      function locate(){
        navigator.geolocation.getCurrentPosition(initialize,fail);
      }

      function initMap() {
       var embassyLatLng = {lat: -13.962460, lng: 33.785780};
       
       var myLatLng = {lat: -13.0, lng: 33.0};
       
       urlVars = getUrlVars();
       var latitude  = urlVars["lat"];
       var longitude  = urlVars["lng"];
       var mapZoom = 8;
       var mapType = "mapTypeId: google.maps.MapTypeId.TERRAIN";

       //Set to center of continent if lat/long not set, set zoom to show entire continent
       if (latitude != ""){
          var myLatLng = {lat: 2, lng: 21.5085};   
          var mapZoom = 4; 
       }
       else{
           var myLatLng = {lat: Number(latitude), lng: Number(longitude)};
       }

      // Create the Google Map…
      var map = new google.maps.Map(d3.select("#map").node(), {
  	 zoom: mapZoom,
         center: myLatLng,
         mapTypeId: google.maps.MapTypeId.TERRAIN
      });

        d3.csv('tweets_500.csv', function(error, data) {  // NEW
  	    if (error) throw error;
                          dataset = data.map(function(d) { return [ +d["lat"], +d["lng"] ]; });
                          console.log(dataset);
                          console.log(d3.entries(dataset));

            var overlay = new google.maps.OverlayView();
            // Add the container when the overlay is added to the map.
            overlay.onAdd = function() {
                var layer = d3.select(this.getPanes().overlayLayer).append("div")
                              .attr("class", "stations");
                // Draw each marker as a separate SVG element.
                // We could use a single SVG, but what size would it have?
                overlay.draw = function() {
                var projection = this.getProjection(),
                    padding = 10;
                var marker = layer.selectAll("svg")
                      .data(dataset)
                      .each(transform) // update existing markers
                      .enter().append("svg")
                      .each(transform)
                      .attr("class", "marker");
                // Add a circle.
               marker.append("circle")
                   .attr("r", 4.5)
                   .attr("cx", padding)
                   .attr("cy", padding);
               // Add a label.
               marker.append("text")
                   .attr("x", padding + 7)
                   .attr("y", padding)
                   .attr("dy", ".31em")
                   .text(function(d) { return d.key; });
              
     function transform(d) {
                   console.log("transform marker " +d[1] +', ' + d[0] )
                          var a = new google.maps.LatLng(d[1], d[0]);
                          console.log(a);
                          var b = projection.fromLatLngToDivPixel(a);
                          console.log(b);
 			  console.log(padding);
                          console.log(b.x)
			  console.log(b.y)
                   return d3.select(this)
                     .style("left", (b.x - padding) + "px")
                     .style("top", -1*(b.y - padding) + "px");
              }
           };
        };
        
           // Bind our overlay to the map…
           overlay.setMap(map);	     
	});


        var marker = new google.maps.Marker({
          position: embassyLatLng,
          map: map,
          title: 'Malawi Embassy'
        });

        var userMarker = new google.maps.Marker({
            position: myLatLng,
            map: map,
            icon: im
        });

	var squareCoords = [
         new google.maps.LatLng(-13.979858807660786, 33.77836921691896),
         new google.maps.LatLng(-13.973563152178794, 33.77836921691896),
         new google.maps.LatLng(-13.973563152178794, 33.76892784118654),
         new google.maps.LatLng(-13.979858807660786, 33.76892784118654)
       ];
      // Construct the polygon
      mapsquare = new google.maps.Polygon({
  	paths: squareCoords,
  	strokeColor: "#FF0000",
        strokeOpacity: 1,
        strokeWeight: 1,
        fillColor: "#FF0000",
        fillOpacity: 0.35
       });

       mapsquare.setMap(map);
      // First, create an object containing LatLng and population for each city.
      var citymap = {
        crisis: {
          center: {lat: -13.878, lng: 33.629},
          tweetcount: 2714856,
          textcolor: "#FF0000"
        },
        unrest: {
          center: {lat: 26.052, lng: 33.243},
          tweetcount: 3857799,
          textcolor: "orange"
        },
      };

       for (var city in citymap) {
          // Add the circle for this city to the map.
          var cityCircle = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.5,
            strokeWeight: 1,
            fillColor: '#FF0000',
            fillOpacity: 0,
            map: map,
            center: citymap[city].center,
            radius: Math.sqrt(citymap[city].tweetcount) * 150
          });
        }      
       for (var city in citymap) {
          // Add the circle for this city to the map.
          var cityCircle = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillOpacity: 0,
            map: map,
            center: citymap[city].center,
            radius: Math.sqrt(citymap[city].tweetcount) * 50
          });
        }      
       for (var city in citymap) {
          // Add the circle for this city to the map.
          var cityCircle = new google.maps.Circle({
            strokeColor: citymap[city].textcolor,
            strokeOpacity: 1,
            strokeWeight: 4,
            fillColor: '#FF0000',
            fillOpacity: 1,
            map: map,
            center: citymap[city].center,
            radius: Math.sqrt(citymap[city].tweetcount) * 10
          });
        }      
                          }
                          // });
</script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBcc2O3mvsB8EmDbFeXmSda_vzRLrDz7IY&callback=initMap" async defer></script>
    <div id="feed">
       <!-- start sw-rss-feed code --> 
       <script type="text/javascript"> 
       <!-- 
       //urlVars = getUrlVars();
       //feedUrl = urlVars["feedurl"];
      </script>

<!-- start sw-rss-feed code --> 
<script type="text/javascript"> 
feedUrl = "http://world.einnews.com/rss/JR0YAaWSr-RAqw8t";
feedUrl = "http://world.einnews.com/rss/GfMESkdkcrDVrjwa"; 
<!-- start sw-rss-feed code --> 
<!--
rssfeed_url = new Array(); 
rssfeed_url[0]="http://world.einnews.com/rss/JR0YAaWSr-RAqw8t";  
rssfeed_frame_width="100%"; 
rssfeed_frame_height="100"; 
rssfeed_scroll="on"; 
rssfeed_scroll_step="6"; 
rssfeed_scroll_bar="off"; 
rssfeed_target="_blank"; 
rssfeed_font_size="12"; 
rssfeed_font_face=""; 
rssfeed_border="on"; 
rssfeed_css_url="http://feed.surfing-waves.com/css/style2a.css"; 
rssfeed_title="on"; 
rssfeed_title_name=""; 
rssfeed_title_bgcolor="#3366ff"; 
rssfeed_title_color="#fff"; 
rssfeed_title_bgimage="http://"; 
rssfeed_footer="off"; 
rssfeed_footer_name="rss feed"; 
rssfeed_footer_bgcolor="#fff"; 
rssfeed_footer_color="#333"; 
rssfeed_footer_bgimage="http://"; 
rssfeed_item_title_length="50"; 
rssfeed_item_title_color="#666"; 
rssfeed_item_bgcolor="#fff"; 
rssfeed_item_bgimage="http://"; 
rssfeed_item_border_bottom="on"; 
rssfeed_item_source_icon="off"; 
rssfeed_item_date="off"; 
rssfeed_item_description="on"; 
rssfeed_item_description_length="120"; 
rssfeed_item_description_color="#666"; 
rssfeed_item_description_link_color="#333"; 
rssfeed_item_description_tag="off"; 
rssfeed_no_items="0"; 
rssfeed_cache = "3f768b1fec999650ea84d82b34711339"; 
//--> 
</script> 
<script type="text/javascript" src="http://feed.surfing-waves.com/js/rss-feed.js"></script> 
<!-- The link below helps keep this service FREE, and helps other people find the SW widget. Please be cool and keep it! Thanks. --> 
<div style="text-align:right; width:180px;"><a href="http://www.surfing-waves.com/feed.htm" target="_blank" style="color:#ccc;font-size:10px">widget @</a> <a href="http://www.surfing-waves.com" target="_blank" style="color:#ccc;font-size:10px">surfing-waves.com</a></div> 
<!-- end sw-rss-feed code -->
    </div>

</div>


</body>
</html>

